@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.Web
@using System.IO
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks  
                               
@functions {
    BlocksPage paragraphMaps = BlocksPage.GetBlockPage("ParagraphMaps");

    public class Location
    {
        public string latitude { get; set; }
        public string longitude { get; set; }
        public string company { get; set; }
        public string address { get; set; }
        public string zip { get; set; }
        public string city { get; set; }
        public string country { get; set; }
        public string description { get; set; }
    }

    public List<Location> Locations { get; set; }
}

@{
    string columnSize = Model.Item.GetList("Width") != null ? Model.Item.GetList("Width").SelectedValue.ToString() : "12";

    Block mapsContainer = new Block
    {
        Id = "ParagraphMapsContainer",
        SortId = 10,
        Component = new Heading { Level = 2, Title = Translate("Find us") },
        Design = new Design {
            RenderType = RenderType.Column,
            Size = columnSize,
            CssClass = "paragraph-container"
        },
        BlocksList = new List<Block> {
            new Block {
                Id = "ParagraphMapsRow",
                SortId = 10,
                Design = new Design {
                    RenderType = RenderType.Row,
                    CssClass = "grid--external-bleed-x"
                }
            }
        }
    };
    paragraphMaps.Add(mapsContainer);

    if (Model.Item.GetItems("LocationMark") != null && Model.Item.GetItems("LocationMark").Count > 0)
    {
        if (Model.Item.GetItems("LocationMark").Count > 1)
        {
            Block paragraphMapsList = new Block
            {
                Id = "ParagraphMapsList",
                SortId = 10,
                Template = RenderMapsList(),
                Design = new Design {
                    RenderType = RenderType.Column,
                    Size = "4"
                }
            };
            paragraphMaps.Add("ParagraphMapsRow", paragraphMapsList);
        }
    }

    if (Model.Item.GetItems("LocationMark") != null && Model.Item.GetItems("LocationMark").Count > 0)
    {
        Block paragraphMapsCanvas = new Block
        {
            Id = "ParagraphMapsCanvas",
            SortId = 10,
            Template = RenderMapsCanvas(),
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = "8"
            }
        };
        paragraphMaps.Add("ParagraphMapsRow", paragraphMapsCanvas);
    }

    Block mapsScripts = new Block
    {
        Id = "ParagraphMapsScripts",
        SortId = 30,
        Template = RenderMapsScripts()
    };
    paragraphMaps.Add(mapsScripts);
}


@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@Include("../Components/GridBuilder.cshtml")
                              
@* Include the components *@
@Include("../Components/GeneralComponents.cshtml")

@* Include the components *@
@Include("Blocks/Maps/Custom__Blocks.cshtml")


@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(paragraphMaps.BlocksRoot.BlocksList)



@helper RenderMapsList() {
    int count = 1;

    <ul class="list list--clean list--scroll dw-mod">
        @foreach (var item in Model.Item.GetItems("LocationMark"))
        {
            <li class="list__item list__item--hover dw-mod" data-lat="@item.GetGeolocation("Location").Latitude" data-lng="@item.GetGeolocation("Location").Longitude" onclick="Maps.OpenInfo((@count-1))">
                <div class="list__number">@count</div>
                <div class="list__numbered-item">
                    <div class="u-bold">@item.GetString("Name")</div>
                    <span>@item.GetString("Address") </span>
                    <div>
                        @if (!String.IsNullOrEmpty(item.GetString("Zip")))
                        {
                            <span>@item.GetString("Zip") </span>
                        }
                        <span>@item.GetString("City") </span>
                    </div>
                    @if (!String.IsNullOrEmpty(item.GetString("Country")))
                    {
                        <span>@item.GetString("Country") </span>
                    }
                </div>
            </li>
            <li class="list__seperator list__seperator--clean"></li>

            count++;
        }
    </ul>
}

@helper RenderMapsCanvas() { 
    <div class="map-container">
        <div id="MapCanvas" class="map-container__canvas"></div>
    </div>
}

@helper RenderMapsScripts() {
    string mapsScriptUrl = "//maps.googleapis.com/maps/api/js";
    mapsScriptUrl += !String.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleMapsAPIKey")) ? "?key=" + Pageview.AreaSettings.GetItem("Settings").GetString("GoogleMapsAPIKey") : "";

    if (Model.Item.GetItems("LocationMark") != null)
    {
        Locations = new List<Location>();

        foreach (var item in Model.Item.GetItems("LocationMark"))
        {
            Location location = new Location();
            location.latitude = item.GetGeolocation("Location") != null ? item.GetGeolocation("Location").Latitude.ToString() : "";
            location.longitude = item.GetGeolocation("Location") != null ? item.GetGeolocation("Location").Longitude.ToString() : "";
            location.company = item.GetString("Name") ?? "";
            location.address = item.GetString("Address") ?? "";
            location.zip = item.GetString("Zip") ?? "";
            location.city = item.GetString("City") ?? "";
            location.country = item.GetString("Country") ?? "";
            location.description = item.GetString("Description") ?? "";
            Locations.Add(location);
        }
    }

    string jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(Locations);

    <script>
        document.addEventListener("DOMContentLoaded", function (event) {
            Maps.Init({containerId: 'MapCanvas', locationsList: @jsonFeed});
        });
    </script>

    <script src="@mapsScriptUrl"></script>
}

