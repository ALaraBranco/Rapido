@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using System.IO
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General

@functions {
    BlocksPage partnersListPage = BlocksPage.GetBlockPage("PartnersList");
}

@{
    var articleItemTypeFields = ItemManager.Metadata.GetItemType("PartnerArticle").Fields;
    var filterOneOptions = articleItemTypeFields.Find("PartnerCountry") != null ? articleItemTypeFields.Find("PartnerCountry").Options.Values : null;

    var partnerGroups = GetLoop("ItemPublisher:ItemType.Fields").FirstOrDefault((item) => item.GetString("ItemPublisher:ItemType.Field.SystemName") == "PartnerStatus");
}


@{
    Block listContainer = new Block
    {
        Id = "ArticleListContainer",
        SortId = 10,
        Design = new Design
        {
            RenderType = RenderType.Row
        },
        BlocksList = new List<Block> {
                new Block {
                Id = "ArticleListBody",
                SortId = 30,
                Design = new Design {
                    RenderType = RenderType.Column,
                    Size = "12"
                }
            }
        }
    };
    partnersListPage.Add(listContainer);

    Block articleListBodyRow = new Block
    {
        Id = "ArticleListBodyRow",
        SortId = 10,
        Design = new Design
        {
            RenderType = RenderType.Row
        }
    };
    partnersListPage.Add("ArticleListBody", articleListBodyRow);

    Block listFilters = new Block
    {
        Id = "ArticleListFilters",
        SortId = 10,
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = "12",
            CssClass = "grid__cell"
        },
        BlocksList = new List<Block> {
            new Block {
                Id = "ArticleListSearch",
                SortId = 10,
                Component = new ArticleListSearch { }
            },
            new Block {
                Id = "ArticleListSolutionFilter",
                SortId = 20,
                Component = new ArticleListFilter { Options = filterOneOptions, Label = Translate("Countries"), SystemName = "PartnerCountry" }
            }
        }
    };
    partnersListPage.Add("ArticleListBodyRow", listFilters);

    int groupIndex = 0;
    foreach (var partnerGroup in partnerGroups.GetLoop("ItemPublisher:ItemType.Field.Options"))
    {
        if (GetLoop("ItemPublisher:Items.List").Where(item => item.GetString("ItemPublisher:Item.PartnerStatus") == partnerGroup.GetString("ItemPublisher:ItemType.Field.Option.Value")).Any())
        {
            Block group = new Block
            {
                Id = "ArticleListGroup" + groupIndex,
                SortId = (groupIndex * 10) + 10,
                Component = new Heading { Title = partnerGroup.GetString("ItemPublisher:ItemType.Field.Option.Label"), Level = 2 },
                Design = new Design {
                    RenderType = RenderType.Column,
                    Size = "12"
                },
                BlocksList = new List<Block> {
                    new Block
                    {
                        Id = "ArticleListGroupRow" + groupIndex,
                        SortId = (groupIndex * 10) + 10,
                        Design = new Design
                        {
                            RenderType = RenderType.Row,
                            HidePadding = true
                        }
                    }
                }
            };
            partnersListPage.Add("ArticleListBodyRow", group);

            int index = 0;
            foreach (LoopItem listItem in GetLoop("ItemPublisher:Items.List").Where(item => item.GetString("ItemPublisher:Item.PartnerStatus") == partnerGroup.GetString("ItemPublisher:ItemType.Field.Option.Value")))
            {
                Block articleListItem = new Block
                {
                    Id = "ArticleListItem" + index,
                    SortId = (index * 10) + 10,
                    Component = new ArticleListItem
                    {
                        Title = listItem.GetString("ItemPublisher:Item.Title"),
                        Link = "/Default.aspx?ID=" + listItem.GetString("ItemPublisher:Item.Field.PageId"),
                        Type = ArticleListItemType.Card,
                        Image = new Image
                        {
                            Title = listItem.GetString("ItemPublisher:Item.Title"),
                            Path = listItem.GetString("ItemPublisher:Item.PartnerLogo"),
                            ImageDefault = new ImageSettings
                            {
                                Width = 500,
                                Height = 200,
                                Crop = 0,
                                DoNotUpscale = true,
                                FillCanvas = true
                            }
                        }
                    },
                    Design = new Design
                    {
                        RenderType = RenderType.Column,
                        Size = "3"
                    }
                };
                partnersListPage.Add("ArticleListGroupRow" + groupIndex, articleListItem);

                index++;
            }

            groupIndex++;
        }
    }

    if (GetLoop("ItemPublisher:Items.List").Count == 0)
    {
        Block notFoundInfo = new Block
        {
            Id = "NotFoundInfo",
            SortId = 40,
            Component = new ArticleListNoResultsInfo { },
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = "12"
            }
        };
        partnersListPage.Add("ArticleListContainer", notFoundInfo);
    }

    if (GetInteger("ItemPublisher:Items.Paging.TotalPages") > 1)
    {
        Block paginationBlock = new Block
        {
            Id = "ArticleListPagination",
            SortId = 40,
            Component = new Pagination { PagingTag = "ItemPublisher:Items" },
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = "12"
            }
        };
        partnersListPage.Add("ArticleListContainer", paginationBlock);
    }
}

@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@Include("../../Components/GridBuilder.cshtml")
@Include("../../Components/GeneralComponents.cshtml")
@Include("../../Components/ArticleComponents.cshtml")
@Include("../../Components/TemplateTagDependent/Pagination.cshtml")


@* Include the Blocks for the page *@
@Include("Blocks/Custom__Blocks.cshtml")


@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(partnersListPage.BlocksRoot.BlocksList)   



<script>
    document.getElementById("Page").classList.add("u-color-light-gray--bg");
</script>



