@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Core
@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce
@using Dynamicweb.Rapido.Blocks.Components.General

@functions {
    bool useFacebookPixel;
    bool useGoogleTagManager;
    BlocksPage mainInfoPage = BlocksPage.GetBlockPage("Product");
}

@{
    bool mainInfoRenderVariantsAsProducts = GetInteger("Ecom:Product.VariantCount") > 1 && Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("RenderVariantsAsProductList");
    if (Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsMatrixLayout") != null && GetInteger("Ecom:Product.VariantCount") > 1)
    {
        mainInfoRenderVariantsAsProducts = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsMatrixLayout").SelectedValue != "hide" ? true : mainInfoRenderVariantsAsProducts;
    }
    if (GetLoop("Boxes").Count > 0) {
        mainInfoRenderVariantsAsProducts = true;
    }
    useFacebookPixel = !string.IsNullOrWhiteSpace(Pageview.AreaSettings.GetItem("Settings").GetString("FacebookPixelID"));
    useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));
    bool hidePrice = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HidePrice");
    bool hideAddToCartButton = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("hideAddToCartButton");

    Block mainInfoHeader = new Block()
    {
        Id = "MainInfoHeader",
        SortId = 10,
        Template = RenderMainInfoHeader()
    };
    mainInfoPage.Add("MainInformation", mainInfoHeader);

    Block mainInfoDescription = new Block()
    {
        Id = "ShortDescription",
        SortId = 30,
        Template = RenderShortDescription()
    };
    mainInfoPage.Add("MainInformation", mainInfoDescription);

    if (!mainInfoRenderVariantsAsProducts)
    {
        Block mainInfoVariants = new Block()
        {
            Id = "Variants",
            SortId = 50,
            Template = RenderMainInfoVariants()
        };
        mainInfoPage.Add("MainInformation", mainInfoVariants);
    }

    Block mainInfoBOM = new Block()
    {
        Id = "BOM",
        SortId = 60,
        Template = RenderMainInfoBOM()
    };
    mainInfoPage.Add("MainInformation", mainInfoBOM);

    if (!mainInfoRenderVariantsAsProducts)
    {
        if (!hidePrice && !hideAddToCartButton)
        {
            Block mainInfoBuy = new Block()
            {
                Id = "Buy",
                SortId = 80,
                Template = RenderMainInfoBuy()
            };
            mainInfoPage.Add("MainInformation", mainInfoBuy);
        }
    }
}

@helper RenderMainInfoHeader()
{
    bool renderVariantsAsProducts = GetInteger("Ecom:Product.VariantCount") > 1 && Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("RenderVariantsAsProductList");
    if (Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsMatrixLayout") != null && GetInteger("Ecom:Product.VariantCount") > 1) {
        renderVariantsAsProducts = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsMatrixLayout").SelectedValue != "hide" ? true : renderVariantsAsProducts;
    }
    if (GetLoop("Boxes").Count > 0) {
        renderVariantsAsProducts = true;
    }
    string pageId = GetGlobalValue("Global:Page.ID").ToString();
    string currentPrice = GetString("Ecom:Product.Discount.Price.PriceFormatted") == GetString("Ecom:Product.Price.PriceFormatted") ? GetString("Ecom:Product.Price.PriceFormatted") : GetString("Ecom:Product.Discount.Price.PriceFormatted");
    bool hideFavorites = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideFavoriteButton");
    bool hideProductNumber = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideProductNumber");

    bool useFontAwesomePro = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetBoolean("UseFontAwesomePro");
    var selectedFavoriteIcon = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("FavoriteIcon") != null ? Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("FavoriteIcon").SelectedValue : "star";
    string favoriteIcon = "fas fa-" + selectedFavoriteIcon;
    string favoriteOutlineIcon = "far fa-" + selectedFavoriteIcon;

    <div>
        <div class="u-pull--left product__title dw-mod">
            <h1 class="u-no-margin">@GetString("Ecom:Product.Name") </h1>
            <h2>@GetString("Ecom:Product.SelectedVariantComboName")</h2>

            @if (!hideProductNumber)
            {
                <div class="item-number dw-mod">@GetString("Ecom:Product.Number")</div>
            }
        </div>
        <div class="u-pull--right">
            @if (!hideFavorites && Dynamicweb.Core.Converter.ToBoolean(GetGlobalValue("Global:Extranet.UserName")) && !renderVariantsAsProducts)
            {
                string favoriteId = "Favorite" + GetString("Ecom:Product.ID");
                <div id="@favoriteId" class="favorites favorites--md u-pull--right js-favorite-btn dw-mod">
                    <div>
                        @{
                            string favorite = GetBoolean("Ecom:Product.IsProductInFavoriteList") ? favoriteIcon : favoriteOutlineIcon;
                            string AddToWishlist = "fbq('track', 'AddToWishlist', {" +
                                "content_name: '" + GetString("Ecom:Product.Name") + "'," +
                                "content_ids: ['" + GetString("Ecom:Product.Number") + "']," +
                                "value: " + GetDouble("Ecom:Product.Price.Price") + "," +
                                "currency: '" + GetString("Ecom:Product.Price.Currency.Code") + "'" +
                            "});";
                        }
                        <label for="FavoriteTrigger"><i class="@favorite fa-1_5x"></i></label>
                    </div>
                    <input type="checkbox" id="FavoriteTrigger" class="dropdown-trigger" />

                    <div class="dropdown">
                        <div class="dropdown__content dropdown__content--show-left dropdown__content--padding u-w220px dw-mod">
                            <ul class="list list--clean dw-mod">
                                @if (GetLoop("CustomerCenter.ListTypes").Count > 0)
                                {
                                    foreach (LoopItem listType in GetLoop("CustomerCenter.ListTypes"))
                                    {
                                        foreach (LoopItem list in listType.GetLoop("CustomerCenter.ProductLists"))
                                        {
                                            string favLinkType = list.GetString("Ecom:Product.List.IsProductInThisList") == "True" ? list.GetString("Ecom:Product.RemoveFromThisList") : list.GetString("Ecom:Product.AddToThisListAction");
                                            string isInListIcon = list.GetString("Ecom:Product.List.IsProductInThisList") == "True" ? favoriteIcon : favoriteOutlineIcon;
                                            <li>
                                                <a href="@favLinkType" class="list__link u-no-underline dw-mod" onclick="@(list.GetString("Ecom:Product.List.IsProductInThisList") != "True" && useFacebookPixel ? AddToWishlist : "")"><i class="@isInListIcon"></i> @list.GetValue("Ecom:CustomerCenter.List.Name")</a>
                                            </li>
                                        }
                                    }
                                }
                                else
                                {
                                    string favLinkType = GetString("Ecom:Product.AddToFavorites") + "&CCListType=0&CCCreateNewList=" + Translate("My favorites");
                                    string isInListIcon = favoriteOutlineIcon;
                                    <li>
                                        <a href="@favLinkType" class="list__link u-no-underline dw-mod" onclick="@(useFacebookPixel ? AddToWishlist : "")"><i class="@isInListIcon"></i> @Translate("My favorites")</a>
                                    </li>
                                }
                            </ul>
                        </div>
                        <label class="dropdown-trigger-off" for="FavoriteTrigger"></label>
                    </div>
                </div>
            }
        </div>
    </div>
}

@helper RenderShortDescription()
{
    if (!String.IsNullOrEmpty(GetString("Ecom:Product.ShortDescription")))
    {
        <div class="introduction-text">
            @GetString("Ecom:Product.ShortDescription")
        </div>
    }
}

@helper RenderMainInfoVariants()
{
    string pageId = GetGlobalValue("Global:Page.ID").ToString();
    string productId = GetString("Ecom:Product.ID");
    string variantSelection = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("variantId")) ? HttpContext.Current.Request.QueryString.Get("variantId").Replace(".", ",") : "";
    string hideHelpText = "";
    string variantsLayout = Pageview.AreaSettings.GetItem("Ecommerce").GetString("VariantsLayout") != null ? Pageview.AreaSettings.GetItem("Ecommerce").GetList("VariantsLayout").SelectedValue : "buttons";

    foreach (LoopItem variantgroup in GetLoop("VariantGroups"))
    {
        foreach (LoopItem variantoption in variantgroup.GetLoop("VariantAvailableOptions"))
        {
            if (variantoption.GetBoolean("Ecom:VariantOption.Selected"))
            {
                hideHelpText = "u-hidden";
            }
        }
    }

    if (GetLoop("VariantGroups").Count > 0)
    {
        var variantCombinationsObject = new List<Array>();
        Dictionary<string, string> variantImages = new Dictionary<string, string>();
        Dictionary<string, List<LoopItem>> variantAlternateImages = new Dictionary<string, List<LoopItem>>();
        foreach (LoopItem variantcomb in GetLoop("VariantCombinations"))
        {
            string[] combinations = variantcomb.GetString("Ecom:VariantCombination.VariantID").Split('.');
            variantCombinationsObject.Add(combinations);

            if (!String.IsNullOrEmpty(GetProductImage(variantcomb)))
            {
                if (!variantImages.ContainsKey(combinations[0])) {
                    variantImages.Add(combinations[0], GetProductImage(variantcomb));
                }
                if (!variantImages.ContainsKey(combinations[0])) {
                    variantAlternateImages.Add(combinations[0], variantcomb.GetLoop("Ecom:Product.AlternativeImages"));
                }
            }
        }

        string combinationsJson = Newtonsoft.Json.JsonConvert.SerializeObject(variantCombinationsObject).Replace("\"", "\'");

        var variantGroupsObject = new List<List<String>>();
        foreach (LoopItem variantGroup in GetLoop("VariantGroups"))
        {
            var variantsObject = new List<String>();
            foreach (LoopItem variantOption in variantGroup.GetLoop("VariantAvailableOptions"))
            {
                variantsObject.Add(variantOption.GetString("Ecom:VariantOption.ID"));
            }
            variantGroupsObject.Add(variantsObject);
        }

        string variantsJson = Newtonsoft.Json.JsonConvert.SerializeObject(variantGroupsObject).Replace("\"", "\'");
        string productGroupId = HttpContext.Current.Request["GroupId"];
        int groupCount = 0;

        <div>
            <div class="js-variants" data-total-variant-groups="@GetLoop("VariantGroups").Count" data-combinations="@combinationsJson" data-variants="@variantsJson" data-variant-selections="@variantSelection" data-selection-complete="UpdatePage" data-page-id="@pageId" data-product-id="@productId" data-group-id="@productGroupId">
                @foreach (LoopItem variantGroup in GetLoop("VariantGroups"))
                {
                    string groupId = variantGroup.GetString("Ecom:VariantGroup.ID");
                    bool renderImageOptions = variantImages.Count == 0 ? false : true;
                    renderImageOptions = renderImageOptions == true && groupCount == 0 ? true : false;

                    <div>
                        <div class="product__variant-group-name u-bold dw-mod">@variantGroup.GetString("Ecom:VariantGroup.Name")</div>
                        <div class="u-margin-top">
                            @if (renderImageOptions == false)
                            {
                                if (variantsLayout == "buttons")
                                {
                                    foreach (LoopItem variantOption in variantGroup.GetLoop("VariantAvailableOptions"))
                                    {
                                        string selected = variantOption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";
                                        string color = !String.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.Colorcode")) ? variantOption.GetString("Ecom:VariantOption.Colorcode") : null;
                                        color = color == null && !String.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.Color")) ? variantOption.GetString("Ecom:VariantOption.Color") : color;

                                        if (!string.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.ImgSmall.Clean")))
                                        {
                                            string variantImage = "/Admin/Public/GetImage.ashx?width=100&amp;height=50&amp;crop=5&amp;Compression=75&amp;image=/Images/" + variantOption.GetString("Ecom:VariantOption.ImgSmall.Clean");
                                            <img data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-group="@groupId" src="@variantImage" onclick="MatchVariants.SelectThis(event)" alt="@variantOption.GetString("Ecom:VariantOption.Name")" title="@variantOption.GetString("Ecom:VariantOption.Name")" class="btn btn--image @selected js-variant-option" data-check="@selected" />
                                        }
                                        else if (!String.IsNullOrEmpty(color))
                                        {
                                            <button type="button" data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-group="@groupId" onclick="MatchVariants.SelectThis(event)" class="btn btn--colorbox u-margin-right @selected js-variant-option" data-check="@selected" style="background-color: @color"></button>
                                        }
                                        else
                                        {
                                            <button type="button" data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-group="@groupId" onclick="MatchVariants.SelectThis(event)" class="btn btn--tag @selected js-variant-option" data-check="@selected">@variantOption.GetString("Ecom:VariantOption.Name")</button>
                                        }
                                    }
                                }
                                else
                                {
                                    <select id="VariantSelector_@groupId" class="u-full-width dw-mod" name="VariantSelector_@groupId" onchange="MatchVariants.SelectOnChange(event)" >
                                        <option>@Translate("Choose")</option>
                                        @foreach (LoopItem variantOption in variantGroup.GetLoop("VariantAvailableOptions"))
                                        {
                                            string selected = variantOption.GetBoolean("Ecom:VariantOption.Selected") ? "selected" : "";
                                            string checkedOption = variantOption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";
                                            string color = !String.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.Colorcode")) ? variantOption.GetString("Ecom:VariantOption.Colorcode") : null;
                                            color = color == null && !String.IsNullOrEmpty(variantOption.GetString("Ecom:VariantOption.Color")) ? variantOption.GetString("Ecom:VariantOption.Color") : color;

                                            <option class="js-variant-option @checkedOption" id="@(groupId)_@variantOption.GetString("Ecom:VariantOption.ID")" value="@(groupId)_@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-group="@groupId" @selected data-check="@checkedOption">@variantOption.GetString("Ecom:VariantOption.Name")</option>
                                        }
                                    </select>
                                }
                            }
                            else
                            {
                                foreach (LoopItem variantOption in variantGroup.GetLoop("VariantAvailableOptions"))
                                {
                                    if (variantImages.ContainsKey(variantOption.GetString("Ecom:VariantOption.ID")))
                                    {
                                        string selected = variantOption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";
                                        string variantImage = "/Admin/Public/GetImage.ashx?width=50&amp;height=50&amp;crop=5&amp;Compression=75&amp;FillCanvas=true&amp;image=" + variantImages[variantOption.GetString("Ecom:VariantOption.ID")];

                                        <img data-variant-id="@variantOption.GetString("Ecom:VariantOption.ID")" data-variant-group="@groupId" src="@variantImage" onclick="MatchVariants.SelectThis(event)" onmouseover="Gallery.openImage(this)" alt="@variantOption.GetString("Ecom:VariantOption.Name")" title="@variantOption.GetString("Ecom:VariantOption.Name")" class="btn btn--image @selected js-variant-option" data-check="@selected" />
                                    }
                                }
                            }
                        </div>
                    </div>

                    groupCount++;
                }
            </div>
            <small class="js-help-text help-text @hideHelpText">@Translate("Please select variant!")</small>
        </div>
    }
}

@helper RenderMainInfoBOM()
{
    if (GetLoop("BOMProducts").Count > 0)
    {
        <h2 class="section-title">@Translate("Including products")</h2>
        foreach (LoopItem BOMProductItem in GetLoop("BOMProducts"))
        {
            string link = "/" + BOMProductItem.GetString("Ecom:Product.LinkGroup.Clean") + (!String.IsNullOrEmpty(BOMProductItem.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + BOMProductItem.GetString("Ecom:Product.VariantID") : "");
            <div class="grid__col--border grid">
                <div class="grid__cell grid__cell--align-middle-left">
                    <a href="@link" class="u-pull--left u-margin-right">
                        <img class="b-lazy" src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=50&image=@GetProductImage(BOMProductItem)&Compression=99" alt="@BOMProductItem.GetString("Ecom:Product.Name")" />
                    </a>
                    <a href="@link">@BOMProductItem.GetString("Ecom:Product.Name")</a>
                </div>
            </div>
        }
    }
}

@helper RenderMainInfoBuy()
{
    string pageId = GetGlobalValue("Global:Page.ID").ToString();
    string variantId = HttpContext.Current.Request.QueryString.Get("variantId");
    string productId = GetString("Ecom:Product.ID");
    string feedId = pageId + "&ProductID=" + productId + "&VariantID=" + variantId + "&Feed=True&redirect=false";

    <div class="product__price-actions js-handlebars-root dw-mod" id="PriceAndActions" data-template="PricesAndActionsTemplate" data-json-feed="/Default.aspx?ID=@feedId" data-preloader="minimal"></div>
    <input type="hidden" value="@GetString("Ecom:Product.VariantID.Extented")" name="Variant" id="Variant_@GetString("Ecom:Product.ID")" />
    @RenderMainInfoBuyScripts()
}

@helper RenderMainInfoBuyScripts()
{
    bool showPrice = !Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HidePrice");
    bool showCartButton = !Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideAddToCartButton");
    bool onlyPreview = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("OnlyPreviewForAnonymous") && Pageview.User == null;
    onlyPreview = Dynamicweb.Rapido.Services.User.IsUserAnonymous() ? true : onlyPreview;
    bool pointShopOnly = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    string variantId = HttpContext.Current.Request.QueryString.Get("variantId") ?? "";
    string feedId = GetGlobalValue("Global:Page.ID").ToString() + "&ProductID=" + GetString("Ecom:Product.ID") + "&VariantID=" + variantId + "&Feed=True&redirect=false";
    string cartIcon = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("CartIcon") != null ? Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("CartIcon").SelectedValue : "fas fa-shopping-cart";
    bool showVATPrice = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("ShowBothPricesWithWithoutVAT");
    bool isPricesWithVATEnabled = Converter.ToBoolean(Pageview.Area.EcomPricesWithVat);
    string hideStockState = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideStockState") ? "u-hidden" : "";
    string hideDelivery = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideShipping") ? "u-hidden" : "";

    @* Handlebars templates *@
    <script id="PricesAndActionsTemplate" type="text/x-template">
    {{#.}}
        {{#if isLiveProductInfoActive}}
        {{#unless isLiveProductInfoRequested}}
        {{getLiveProductInfo 'PriceAndActions'}}
        {{/unless}}
        {{/if}}
        @if (!onlyPreview)
        {
            @RenderPriceInfo("ProductPage")

            if (showCartButton)
            {
                var addToCartBtn = new AddToCart
                {
                    ProductId = "{{productId}}",
                    VariantId = "{{variantid}}",
                    UnitId = "{{unitId}}",
                    ProductInfo = "{{productInfo}}",
                    BuyForPoints = pointShopOnly,
                    WrapperCssClass = "buttons-collection--right product__price-actions__actions dw-mod",
                    AddButton = new AddToCartButton
                    {
                        OnClick = "{{facebookPixelAction}}",
                        ExtraAttributes = new Dictionary<string, string>
                        {
                            { "{{disabledBuyButton}}", "" }
                        }
                    },
                    UnitSelector = new UnitSelector
                    {
                        OptionsContent = "{{#unitOptions}}{{>UnitOption}}{{/unitOptions}}",
                        Id = "UnitOptions_{{id}}",
                        SelectedOption = "{{unitName}}",
                        CssClass = "{{hasUnits}}"
                    }
                };

                if (!pointShopOnly)
                {
                    addToCartBtn.QuantitySelector = new QuantitySelector
                    {
                        Id = "Quantity_{{id}}"
                    };
                }
                
                @Render(addToCartBtn)
                
                if (Pageview.User != null && !pointShopOnly && Dynamicweb.Security.Licensing.LicenseManager.LicenseHasFeature("LoyaltyPoints"))
                {
                    <text>
                        {{#if canBePurchasedWithPoints}}
                            <form method="post" role="form" class="u-no-margin u-margin-top">
                                <input type="hidden" name="ProductID" value="{{id}}" />
                                <button type="submit" class="btn btn--loyalty-points u-no-margin dw-mod pull-right u-no-margin js-cart-btn {{disabledBuyButton}}" name="CartCmd" value="addWithPoints">@Translate("Buy for") {{points}} @Translate("points")</button>
                            </form>
                        {{/if}}
                    </text>
                }
            }
            else
            {
                <button type="button" id="CartButton_{{id}}" class="u-hidden"></button>
            }
            
            <div class="product__stock-delivery dw-mod"> 
                {{#if stockText}}          
                    <span class="@hideStockState">{{stockText}} <div class="stock-icon {{stockState}}"></div></span>                                   
                {{/if}}
                {{#if deliveryText}}                                              
                    <span class="@hideDelivery">{{deliveryText}}</span>              
                {{/if}}
            </div>
        }
    {{/.}}
    </script>
    
    

    <script id="Units" type="text/x-template">
        <div class="dropdown__item dw-mod" onclick="HandlebarsBolt.UpdateContent('PriceAndActions', '/Default.aspx?ID=@feedId&UnitID={{value}}')">{{name}}</div>
    </script>

    <script id="UnitOption" type="text/x-template">
        <div class="dropdown__item dw-mod" onclick="HandlebarsBolt.UpdateContent('PriceAndActions', '{{link}}&feed=true&UnitID={{value}}&rid={{id}}')">{{name}}</div>
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (document.getElementById("PriceAndActions")) {
                document.getElementById("PriceAndActions").addEventListener("contentLoaded", function (event) {
                    if (document.querySelector(".js-variants") != null) {
                        MatchVariants.Update(document.querySelector(".js-variants"), "DoNothing");
                    }
                });
            }
        });
    </script>
}

@if (useGoogleTagManager)
{
    var groupObject = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(GetString("Ecom:Product.PrimaryOrFirstGroupID"));

    <script>
        // Measure a view of product details. This example assumes the detail view occurs on pageload,
        // and also tracks a standard pageview of the details page.

        dataLayer.push({
            "ecommerce": {
                "detail": {
                    "actionField": {},    // 'detail' actions have an optional list property.
                    "products": [{
                        "name": "@GetString("Ecom:Product.Name")",         // Name or ID is required.
                        "id": "@GetString("Ecom:Product.ID")",
                        "price": "@(GetDouble("Ecom:Product.Discount.Price.Price") != GetDouble("Ecom:Product.Price.Price") ? GetDouble("Ecom:Product.Discount.Price.Price") : GetDouble("Ecom:Product.Price.Price"))",
                        "brand": "@GetString("Ecom:Product:Field.brand.Value")",
                        "category": "@(groupObject != null ? groupObject.Name : "")",
                        "variant": "@(!string.IsNullOrEmpty(GetString("Ecom:Product.VariantID")) ? GetString("Ecom:Product.VariantID") : GetString("Ecom:Product.VariantID.Extented"))"
                    }]
                }
            }
        });
    </script>
}

