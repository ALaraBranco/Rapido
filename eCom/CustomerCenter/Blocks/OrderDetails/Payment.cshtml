@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using Dynamicweb.Rapido.Blocks;
@using Dynamicweb.Rapido.Blocks.Components.General;
@using Dynamicweb.Rapido.Blocks.Components;

@functions {
    BlocksPage paymentPage = BlocksPage.GetBlockPage("Details");

    public string GetPaymentColumnWidth()
    {

        string businessAddress = Pageview.AreaSettings.GetItem("Settings").GetItem("Address") != null ? Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("StreetAddress") : "";
        bool showDelivery = !string.IsNullOrWhiteSpace(GetString("Ecom:Order.Delivery.Address"));
        bool showShop = Pageview.AreaSettings.GetItem("Settings").GetItem("Address") != null && !string.IsNullOrWhiteSpace(businessAddress);
        string columnWidth = (showDelivery || showShop) ? "4" : "6";
        columnWidth = Pageview.Device.ToString() == "Mobile" ? "12" : columnWidth;

        return columnWidth;
    }
}

@{
    Block payment = new Block
    {
        Id = "Payment",
        SortId = 40,
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = GetPaymentColumnWidth(),
            CssClass = "pdf-column"
        },
        BlocksList = new List<Block> {
            new Block {
                Id = "PaymentTitle",
                SortId = 10,
                Component = new Heading {
                    Title = Translate("Payment and shipping"),
                    Level = 3, Icon = new Icon { Prefix = "fas", Name = "fa-credit-card" },
                    CssClass = "u-no-margin"
                }
            },
            new Block {
                Id = "PaymentContent",
                SortId = 20,
                Design = new Design {
                    CssClass = "grid__cell"
                },
                Template = RenderPayment()
            }
        }
    };

    paymentPage.Add("FooterContent", payment);
}

@helper RenderPayment()
{
    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.PaymentMethod")))
    {
        <div>@Translate("Payment method"): @Translate(GetString("Ecom:Order.PaymentMethod"))</div>
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.ShippingMethod")))
    {
        <div>@Translate("Shipping method"): @Translate(GetString("Ecom:Order.ShippingMethod"))</div>
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.TransactionCardNumber")))
    {
        <div>@Translate("Card no."): @GetString("Ecom:Order.TransactionCardNumber")</div>
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.TransactionNumber")))
    {
        <div>@Translate("Transaction no."): @GetString("Ecom:Order.TransactionNumber")</div>
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.TransactionStatus")))
    {
        <div>@Translate("Transaction state"): @GetString("Ecom:Order.TransactionStatus")</div>
    }
}