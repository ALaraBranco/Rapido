@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System.Text.RegularExpressions;
@using Dynamicweb.Frontend
@using System.Reflection
@using Dynamicweb.Content.Items
@using System.Web.UI.HtmlControls
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderComponentCode(dynamic settings)
{
    string methodName = settings.Content.HelperName;
    dynamic[] methodsettings = new dynamic[1];
    methodsettings[0] = settings.Content;

    Type methodType = this.GetType();
    MethodInfo helperMethod = methodType.GetMethod(methodName);

    <div class="u-color-light-gray--bg u-border u-padding--lg u-margin-bottom--lg">
        <div class="u-bold u-margin-bottom--lg">@Translate("How to use")</div>
        <div>
            <div>Block myBlock = new Block</div>
            <div>{</div>
            <div>&nbsp;&nbsp;&nbsp;Id = "MyBlock",</div>
            <div>&nbsp;&nbsp;&nbsp;SortId = 10,</div>
            <div>&nbsp;&nbsp;&nbsp;Component = new @settings.Content.GetType().Name.ToString() { OPTIONAL_settings }</div>
            <div>};</div>
            <div>myPage.Add("MyContainer", myBlock);</div>
        </div>
        <p></p>
        <div class="u-bold">@Translate("Or")</div>
        <p></p>
        <div>
            <div>@@Render(new @settings.Content.GetType().Name.ToString() { OPTIONAL_settings })</div>
        </div>
    </div>

    <textarea class="u-color-dark--bg u-color-light u-padding" id="@settings.Content.GetType().Name.ToString()__Code" name="@settings.Content.GetType().Name.ToString()__Code">
        @{
            try
            {
                HtmlElement finalHtmlElement = new HtmlElement();
                var helperMethodAsString = helperMethod.Invoke(this, methodsettings);
                @helperMethodAsString
            }
            catch (Exception ex)
            {
                throw new Exception(settings.GetType().Name + " method '" + methodName + "' could not be invoked", ex);
            }
        }
    </textarea>

    <script>
        var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("@settings.Content.GetType().Name.ToString()__Code"), {
            lineNumbers: true,
            mode: "xml",
            tabMode: "indent",
            theme: "cobalt"
        });
    </script>
}